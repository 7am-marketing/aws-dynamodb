{"name":"Aws-dynamodb","tagline":"Wrapper around aws-sdk for nodejs to simplify working with DynamoDB","body":"[![npm page](https://nodei.co/npm/aws-dynamodb.png?downloads=true)](https://www.npmjs.com/package/aws-dynamodb)\r\n\r\n#aws-dynamodb\r\nWrapper around aws-sdk for nodejs to simplify working with DynamoDB\r\n\r\n**Installation**\r\n\r\n\tnpm install aws-dynamodb\r\n\t\r\n\t// check for new versions\r\n\tnpm outdated \r\n\t\r\n\t// upgrade if necessary\r\n\tnpm update aws-dynamodb\r\n\t\r\n\r\n**Initialization**\r\n\r\n\tvar $credentials = {\r\n\t\t\"accessKeyId\": \"XXXXXXXXXXXXXXXX\", \r\n\t\t\"secretAccessKey\": \"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\", \r\n\t\t\"region\": \"eu-west-1\"\r\n\t}\r\n\r\n\tvar DynamoDB = require('aws-dynamodb')($credentials)\r\n\r\n**Doing raw calls to aws-sdk**\r\n\r\n\tDynamoDB.client.listTables(function(err, data) {\r\n\t\tconsole.log(data.TableNames);\r\n\t});\r\n\tconsole.log( DynamoDB.client )\r\n\r\n**Insert Item** ( does not replace existing items )\r\n\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.insert({\r\n\t\t\temail: 'test@test.com',\r\n\t\t\tpassword: 'qwert',\r\n\t\t\tcreated_at: new Date().getTime(),\r\n\t\t\tupdated_at: null\r\n\t\t}, function(err,data) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.insert({\r\n\t\t\tto: 'test@test.com',\r\n\t\t\tdate: new Date().getTime(),\r\n\t\t\tsubject: 'Foo',\r\n\t\t\tmessage: 'Bar'\r\n\t\t})\r\n\r\n\t// insert item with nested attributes\r\n\t// carefull though as foo.bar domain actually exist :)\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.insert({\r\n\t\t\tto: 'test@test.com',\r\n\t\t\tdate: new Date().getTime(),\r\n\t\t\tboolean_true: true,\r\n\t\t\tboolean_false: false,\r\n\t\t\tkey_null: null,\r\n\t\t\tstring: \"string\",\r\n\t\t\tnumber: 1,\r\n\t\t\tarray_empty: [],\r\n\t\t\tarray_strings: ['alfa','beta','gama'],\r\n\t\t\tarray_numbers: [7,9,15],\r\n\t\t\tarray_mixed: [null, \"string\", 5, true, false, { key: \"value\"}, [\"nested\",\"array\"] ],\r\n\t\t\tnested_object: {\r\n\t\t\t\tname: \"Foo\",\r\n\t\t\t\temail: \"baz@foo.bar\",\r\n\t\t\t\tnested_attribute: {\r\n\t\t\t\t\tboolean_value: true,\r\n\t\t\t\t\tnull_key: null,\r\n\t\t\t\t\tsome_string: \"tadaa\",\r\n\t\t\t\t\tlucky_number: 12\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\r\n**Update Item** ( does not create the item if item does not exist )\r\n\r\n\t// update multiple attributes in a HASH table\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.where('email').eq('test@test.com')\r\n\t\t.update({\r\n\t\t\tpassword: 'qwert', \r\n\t\t\tfirstname: 'Smith'\r\n\t\t}, function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\r\n\t// update 1 attribute in a HASH-RANGE table\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.where('date').eq( 1375538399 )\r\n\t\t.update({\r\n\t\t\tseen: true\r\n\t\t}, function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Replace Item** ( does not create the item if item does not exist )\r\n\t\r\n\t// completely replaces the item, new item will only contain specified attributes \r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.replace({\r\n\t\t\temail: 'test@test.com',\r\n\t\t\tpassword: 'qwert',\r\n\t\t\tcreated_at: new Date().getTime()\r\n\t\t}, function(err,data) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Insert on Duplicate Key Update** ( in 1 request to DynamoDB )\r\n\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.where('email').eq('test@test.com')\r\n\t\t.insert_or_update({\r\n\t\t\tpassword: 'qwert', \r\n\t\t\tfirstname: 'Smith'\r\n\t\t}, function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Increment Item's Attribute(s)** ( does not create the item if item does not exist )\r\n\r\n\t// increment 1 attribute in a HASH table \r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.where('email').eq('test@test.com')\r\n\t\t.increment({\r\n\t\t\tlogin_count: 1\r\n\t\t}, function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\t\r\n\t// increment multiple attributes in a HASH-RANGE table\r\n\tDynamoDB\r\n\t\t.table('statistics')\r\n\t\t.where('domain').eq('mydomain.com')\r\n\t\t.where('day').eq('2013-11-01')\r\n\t\t.increment({\r\n\t\t\tvisitors: 1,\r\n\t\t\tpage_views 5,\r\n\t\t\tunique_page_views: 1\r\n\t\t}, function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Delete Item's Attribute(s)**\r\n\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.where('date').eq( 1375538399 )\r\n\t\t.delete(['seen','subject'], function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Delete Item**\r\n\r\n\t// delete an item from a HASH table\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.where('email').eq( 'test@test.com' )\r\n\t\t.delete(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\r\n\t// delete an item from a HASH-RANGE table\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq( 'user1@test.com' )\r\n\t\t.where('date').eq( 1375538399 )\r\n\t\t.delete(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Get Item**\r\n\r\n\t// getting an item with HASH key only\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.where('email').eq('test@test.com')\r\n\t\t.get(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n\t// getting an item from a HASH-RANGE table, with consistent read\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.where('date').eq( 1375538399 )\r\n\t\t.consistent_read()\r\n\t\t.get(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n\t// specifying what attributes to return\r\n\tDynamoDB\r\n\t\t.table('users')\r\n\t\t.select('email','registered_at')\r\n\t\t.where('email').eq( 'test@test.com' )\r\n\t\t.get(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\t\r\n**Query** ( not possible on HASH only tables )\r\n\r\n\t// for hash key comparson operator is always eq()\r\n\t// for range key you can specify: le() , lt() , ge() , gt() , begins_with() , between(a,b)\r\n\r\n\t// base query, return 10 records with consistent read\r\n\tDynamoDB\r\n\t\t.table('statistics')\r\n\t\t.where('domain').eq('mydomain.com')\r\n\t\t.limit(10)\r\n\t\t.consistent_read()\r\n\t\t.query(function(err, data ) {\r\n\t\t\tconsole.log(err,data)\r\n\t\t})\r\n\r\n\t// only return specified fields, in descending order\r\n\tDynamoDB\r\n\t\t.table('statistics')\r\n\t\t.select('unique_visitors','unique_pageviews')\r\n\t\t.where('domain').eq('mydomain.com')\r\n\t\t.where('day').ge('2013-11-01')\r\n\t\t.descending()\r\n\t\t.query(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\r\n**Query an Index with order_by()**\r\n\r\n\t// suppose you have an index on messages called starredIndex\r\n\t// and you want to retrieve only the messages that are starred\r\n\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.order_by('starredIndex')\r\n\t\t.descending()\r\n\t\t.query(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n\t// return all attributes including non-projected ( LSI only )\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.select( DynamoDB.ALL )\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.order_by('starredIndex')\r\n\t\t.descending()\r\n\t\t.query(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\t\r\n\t// NOTE: specifying non-projected fields in select() will:\r\n\t// * cost you extra reads on a LSI index\r\n\t// * not be returned on a GSI index\r\n\r\n**Query filtering**\r\n\r\n\t// A filter lets you apply conditions to the data after query\r\n\t// Only the items that meet your conditions are returned\r\n\t// All the conditions must evaluate to true ( conditions are ANDed together )\r\n\t// Comparison operators: eq(), le() , lt() , ge() , gt() , begins_with() , between(a,b)\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.where('to').eq('user1@test.com')\r\n\t\t.having('one_attribute').between(100,200)\r\n\t\t.having('other_attribute').eq(true)\r\n\t\t.query(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n**Full table scan** \r\n\r\n\t// optionally you can limit the returned attributes with .select()\r\n\t// and the number of results with .limit()\r\n\r\n\tDynamoDB\r\n\t\t.table('messages')\r\n\t\t.select('from','subject')\r\n\t\t.limit(10)\r\n\t\t.scan(function( err, data ) {\r\n\t\t\tconsole.log( err, data )\r\n\t\t})\r\n\r\n\t// NOTE: specifying non-projected fields in select() will:\r\n\t// * cost you extra reads on a LSI index\r\n\t// * not be returned on a GSI index\r\n\r\n\r\n#Tables referenced in the samples\r\n\r\nTable **users** with HASH key only \r\n\r\nemail `hash` | password | created_at\r\n--- | --- | ---\r\n**test@test.com** | test123 | *1375538399*\r\n\r\n\r\nTable **messages** with HASH and RANGE (int) key\r\n\r\nto `hash` | date `range` | from | subject | message_body | starred\r\n--- | --- | --- | --- | ---\r\n**user1@test.com** | **1375538399** | user2@test.com | Hello User1 | Goodbye User1 | 1\r\n**user2@test.com** | **1384167887** | somebody@otherdomain.com | Foo | Bar |\r\n\r\n\r\nTable **statistics** with HASH and RANGE (string) key\r\n\r\nsite `hash` | day `range` | visitors | unique_visitors | pageviews | unique_pageviews\r\n--- | --- | --- | --- | --- | ---\r\n**mydomain.com** | **2013-11-01 21:00:00** | 100 | 50 | 200 | 150\r\n**mydomain.com** | **2013-11-01 23:00:00** | 90 | 40 | 100 | 95\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}